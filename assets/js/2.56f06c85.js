(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{166:function(t,e,s){t.exports=s.p+"assets/img/12481551924836_.pic.734f8045.jpg"},167:function(t,e,s){t.exports=s.p+"assets/img/WechatIMG1251.0e4c9be3.png"},168:function(t,e,s){t.exports=s.p+"assets/img/WechatIMG1252.34ba8f76.png"},189:function(t,e,s){"use strict";s.r(e);var r=s(0),i=Object(r.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据结构 - https://zh.wikipedia.org/"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"http://www.bigocheatsheet.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("复杂度 - http://www.bigocheatsheet.com/"),r("OutboundLink")],1)])]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),r("br"),t._v(" "),r("ul",[r("li",[t._v("参考地址："),r("a",{attrs:{href:"http://www.bigocheatsheet.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.bigocheatsheet.com/"),r("OutboundLink")],1)])]),t._v(" "),r("img",{staticStyle:{width:"800px"},attrs:{src:s(166)}}),t._v(" "),t._m(5),t._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%A0%86%E7%A9%8D",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文档"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("堆（英语：Heap）是计算机科学中的一种特别的树状数据结构。若是满足以下特性，即可称为堆：“给定堆中任意节点 P 和 C，若 P 是 C 的母节点，那么 P 的值会小于等于（或大于等于） C 的值”。若母节点的值恒小于等于子节点的值，此堆称为最小堆（min heap）；反之，若母节点的值恒大于等于子节点的值，此堆称为最大堆（max heap）。在堆中最顶端的那一个节点，称作根节点（root node），根节点本身没有母节点（parent node）。")])]),t._v(" "),t._m(6),t._v(" "),r("p",[t._v("堆（通常是二叉堆）常用于排序。这种算法称作堆排序。")]),t._v(" "),t._m(7),t._v(" "),r("img",{staticStyle:{width:"400px"},attrs:{src:s(167)}}),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),r("img",{staticStyle:{width:"400px"},attrs:{src:s(168)}}),t._v(" "),t._m(11),t._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%A0%86%E6%A0%88",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文档"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("堆栈（英语：stack）又称为栈或堆叠，是计算机科学中的一种抽象数据类型，只允许在有序的线性数据集合的一端（称为堆栈顶端，英语：top）进行加入数据（英语：push）和移除数据（英语：pop）的运算。因而按照后进先出（LIFO, Last In First Out）的原理运作。。")]),t._v(" "),r("p",[t._v("堆栈常用一维数组或链表来实现。")])]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/pengyingh/articles/2388882.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文档"),r("OutboundLink")],1)]),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文档"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。")]),t._v(" "),r("p",[t._v("使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。")]),t._v(" "),r("p",[t._v('在计算机科学中，链表作为一种基础的数据结构可以用来生成其它类型的数据结构。链表通常由一连串节点组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（"links"）。链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的访问往往要在不同的排列顺序中转换。而链表是一种自我指示数据类型，因为它包含指向另一个相同类型的数据的指针（链接）。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。链表有很多种不同的类型：单向链表，双向链表以及循环链表。')]),t._v(" "),t._m(25),t._v(" "),t._m(26)]),t._v(" "),t._m(27),t._v(" "),r("p",[t._v("常用于组织删除、检索较少，而添加、遍历较多的数据。 如果与上述情形相反，应采用其他数据结构或者与其他数据结构组合使用。")]),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文档"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("散列表（Hash table，也叫哈希表），是根据键（Key）而直接访问在内存存储位置的数据结构。也就是说，它通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做散列函数，存放记录的数组称做散列表。")]),t._v(" "),r("p",[t._v("一个通俗的例子是，为了查找电话簿中某人的号码，可以创建一个按照人名首字母顺序排列的表（即建立人名 {\\displaystyle x} x到首字母 {\\displaystyle F(x)} F(x)的一个函数关系），在首字母为W的表中查找“王”姓的电话号码，显然比直接查找就要快得多。这里使用人名作为关键字，“取首字母”是这个例子中散列函数的函数法则 {\\displaystyle F()} F()，存放首字母的表对应散列表。关键字和函数法则理论上可以任意确定。")])])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据结构","aria-hidden":"true"}},[this._v("#")]),this._v(" 数据结构")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"本文参考地址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本文参考地址","aria-hidden":"true"}},[this._v("#")]),this._v(" 本文参考地址")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"数据结构有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据结构有哪些","aria-hidden":"true"}},[this._v("#")]),this._v(" 数据结构有哪些")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("堆 - Heap")]),t._v(" "),s("li",[t._v("堆栈 - Stack")]),t._v(" "),s("li",[t._v("数组 - Array")]),t._v(" "),s("li",[t._v("队列 - Queue")]),t._v(" "),s("li",[t._v("链表 - LinkedList")]),t._v(" "),s("li",[t._v("数 - Tree")]),t._v(" "),s("li",[t._v("图 - graph")]),t._v(" "),s("li",[t._v("哈希 - Hash")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"数据结构复杂度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据结构复杂度","aria-hidden":"true"}},[this._v("#")]),this._v(" 数据结构复杂度")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"堆-heap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆-heap","aria-hidden":"true"}},[this._v("#")]),this._v(" 堆 - Heap")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"主要用途"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主要用途","aria-hidden":"true"}},[this._v("#")]),this._v(" 主要用途")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"支持的常用操作和复杂度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持的常用操作和复杂度","aria-hidden":"true"}},[this._v("#")]),this._v(" 支持的常用操作和复杂度")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"常用堆"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用堆","aria-hidden":"true"}},[this._v("#")]),this._v(" 常用堆")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("二叉堆")]),this._v(" "),e("li",[this._v("二项式堆")]),this._v(" "),e("li",[this._v("最大-最小堆")]),this._v(" "),e("li",[this._v("斐波纳契堆")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"常用堆的支持操作和复杂度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用堆的支持操作和复杂度","aria-hidden":"true"}},[this._v("#")]),this._v(" 常用堆的支持操作和复杂度")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"堆栈-stack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆栈-stack","aria-hidden":"true"}},[this._v("#")]),this._v(" 堆栈 - Stack")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"主要用途-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主要用途-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 主要用途")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("后进先出")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"常见操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见操作","aria-hidden":"true"}},[this._v("#")]),this._v(" 常见操作")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("推入：将数据放入堆栈顶端，堆栈顶端移到新放入的数据。")]),this._v(" "),e("li",[this._v("弹出：将堆栈顶端数据移除，堆栈顶端移到移除后的下一笔数据。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用","aria-hidden":"true"}},[this._v("#")]),this._v(" 应用")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("回溯")]),this._v(" "),e("li",[this._v("递归")]),this._v(" "),e("li",[this._v("深度优先搜索")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"实景场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实景场景","aria-hidden":"true"}},[this._v("#")]),this._v(" 实景场景")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("用于符号匹配。")]),this._v(" "),e("p",[this._v("在编译器的语法检查中，一个过程就是检查各种括号是否匹配，比如 ([]) ，这就是匹配的，而 {[}] 就不匹配了。可以用堆栈来实现括号匹配。")])]),this._v(" "),e("li",[e("p",[this._v("用于计算代数式")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"队列-queue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#队列-queue","aria-hidden":"true"}},[this._v("#")]),this._v(" 队列 - Queue")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),e("p",[this._v("队列，又称为伫列（queue），是先进先出（FIFO, First-In-First-Out）的线性表。在具体应用中通常用链表或者数组来实现。队列只允许在后端（称为rear）进行插入操作，在前端（称为front）进行删除操作。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"数组-array"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组-array","aria-hidden":"true"}},[this._v("#")]),this._v(" 数组 - Array")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),e("p",[this._v("在计算机科学中，数组数据结构（英语：array data structure），简称数组（英语：Array），是由相同类型的元素（element）的集合所组成的数据结构，分配一块连续的内存来存储。利用元素的索引（index）可以计算出该元素对应的存储地址。")]),this._v(" "),e("p",[this._v("最简单的数据结构类型是一维数组。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"链表-linkedlist"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#链表-linkedlist","aria-hidden":"true"}},[this._v("#")]),this._v(" 链表 - LinkedList")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("线性表")]),this._v(" "),e("code",[this._v("不必须按顺序存储")]),this._v(" "),e("code",[this._v("插入的时候可以达到O(1)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("查找一个节点或者访问特定编号的节点则需要O(n)的时间")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"常见用途"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见用途","aria-hidden":"true"}},[this._v("#")]),this._v(" 常见用途")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"数-tree"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数-tree","aria-hidden":"true"}},[this._v("#")]),this._v(" 数 - Tree")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"图-graph"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#图-graph","aria-hidden":"true"}},[this._v("#")]),this._v(" 图 - Graph")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"散列表-hash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#散列表-hash","aria-hidden":"true"}},[this._v("#")]),this._v(" 散列表 - Hash")])}],!1,null,null,null);i.options.__file="basic.md";e.default=i.exports}}]);